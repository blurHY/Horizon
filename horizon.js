onerror = (e) => {
	showError(e)
}

String.prototype.splice = function (idx, rem, str) {
	return this.slice(0, idx) + str + this.slice(idx + Math.abs(rem))
}
const filterblank = x => x.trim() !== ""

timeagoinstance = timeago()

LoadAllDataOnce = true // Don't set this to false.

function zn_version_to_deci(str) {
	return str.replace(/([0-9]+)(.*)/g, (a, b, c) => b + "." + c.replace(/\./g, ""))
}

window.max_zn_ver = 0.63 // 0.6.3

window.onscroll = function () {
	if (document.documentElement.scrollTop > 10)
		$(".topbar").removeClass("top")
	else
		$(".topbar").addClass("top")
}

$(function () {
	page.switchPage("defaultpage")
	window.progressbox = $(".progressbox")
	window.progressbar = $(".progressbox .progress")
	window.progressbar.progress()

	$(".minfobox").click(() => false)
	$("a#options").click(options)
	$("a#help").click(help)
	$(".modalbox").click(() => false)
	$(".settingbtn").click(function (ev) {
		ev.stopPropagation()
		page.switchPage("settingspage")
	})

	$(".logosmall").click(function () {
		page.switchPage("defaultpage")
	})
	$(".help").html(marked(`
### Examples
0chan -porn (Exclude keyword porn)
### About
Learn more on github repo <https://github.com/blurHY/Horizon/projects>
Keywords and phrases are generated by python nlp library, jieba and rake.
`))

	$(".ui.dropdown").dropdown({
		values: [{
			name: "ZeroTalk",
			value: "ZeroTalk"
		},
			{
				name: "ZeroBlog",
				value: "ZeroBlog"
			},
			{
				name: "ZeroWiki",
				value: "ZeroWiki"
			},
			{
				name: "ZeroUp",
				value: "ZeroUp"
			}
		]
	}).find(".default").text("Type")

	lang = $("body").attr("lang")
})

function beatifyUrl(link) {
	if (!link) return ""
	link = link.replace(/^\/*(.*?)$/g, "/$1")
	link = link.endsWith("/") ? link.slice(0, -1) : link
	return link
}

class Page extends ZeroFrame {
	setSiteInfo(site_info) {
		this.site_info = site_info
	}

	init() {
		this.needToQuery_zites = new Set() // list of site address that needed to query in the database after the page is shown
		this.needToQuery_zites_obj = {} // using the site address as the key and use a array as the value
		this.perPageCount = 100
		this.maxPagerBtnCount = 4
		this.corszitesForQuery = []
		this.timeDurations = []
		this.siteIdAndData = {}
	}

	checkServerVersion() {
		if (this.serverInfo.rev < 3582) {
			this.cmd("wrapperNotification", ["error", "Please update your zeronet client. Horizon won't work below rev3582"])
		}
	}

	checkFileExist(list, time = 0) {
		let kw = list.filter(a => a.startsWith("data_keywords")).length
		let ph = list.filter(a => a.startsWith("data_phrases")).length
		let ma = list.filter(a => a.startsWith("data_main")).length

		let kw_ = page.fileNames.filter(a => a.startsWith("data/data_keywords")).length
		let ph_ = page.fileNames.filter(a => a.startsWith("data/data_phrases")).length
		let ma_ = page.fileNames.filter(a => a.startsWith("data/data_main")).length

		if (kw < kw_ || ph < ph_ || ma < ma_) {
			if (!page.fileNotArrived)
				page.cmd("wrapperNotification", ["info", "Some files are not downloaded yet. You should wait for them."])
			page.fileNotArrived = true
			setTimeout(() => {
				page.checkFileExist(list, time + 1)
			}, 6000)
		}
		else {
			page.fileNotArrived = false
			setTimeout(page.checkDataBase, 3000)
		}
	}

	checkDataBase() {
		page.cmd("dbQuery", ["select count(*) as val from main"], res => {
			if (res[0].val === 0) {
				page.cmd("wrapperNotification", ["info", "Maybe there is something wrong in your zeronet client. Please check the logs."])
			}
			else if (res[0].val < 100000) {
				page.cmd("wrapperNotification", ["info", "Database is still importing. So it will be slow to search now."])
			}
		})
	}

	getContentJson(cb) {
		this.cmd("fileGet", ["content.json"], res => {
			try {
				this.contentJson = JSON.parse(res)
				this.files = this.contentJson.files
				this.fileNames = Object.getOwnPropertyNames(this.contentJson.files)
				if (cb)
					cb()
			}
			catch (e) {
				showError("content.json is broken")
			}
		})
	}

	onOpenWebsocket() {
		this.getCORSList()

		$(".corszitessubmit").click(function () {
			page.submitCORSZite()
			return false
		})

		$(document.body).click(function (ev) {
			page.hideMoreInfo()
			hideModalBox()
			if (page.settings && page.settings.openNewWindow) {
				let parents = $(ev.target).parents("a.ititle")
				if (ev.target.tagName === "A" || parents.length > 0) {
					let href = ((parents.length > 0) ? parents : $(ev.target)).data("href")
					if (href) {
						ev.stopPropagation()
						ev.preventDefault()
						page.cmd("wrapperOpenWindow", href)
					}
				}
			}
		})

		this.cmd("siteInfo", [], function (site_info) {
			page.setSiteInfo(site_info)
		})

		this.cmd("dbQuery", ["select max(peers) as val from zites"], arr => {
			window.maxPeers = arr[0].val
		})

		this.initCORS()
		this.getsettings()

		$(".q").keydown(function (ev) {
			if (ev.key === "Enter" && $(this).val().trim() !== "") {
				page.Search(this.value)
			}
		})

		this.cmd("serverInfo", [], res => {
			this.serverInfo = res
			this.checkServerVersion()
		})

		this.cmd("fileList", ["data"], res => {
			this.getContentJson(() => {
				this.checkFileExist(res)
			})
		})
	}

	onRequest(cmd, message) {
		if (cmd == "setSiteInfo")
			this.setSiteInfo(message.params)
		else
			this.log("Unknown incoming message:", cmd)
	}

	switchPage(name = "resultpage") {
		window.onscroll()
		$(`.${name}`).removeClass("hide")
		let hides = $(`body>div.page:not(.${name})`)
		hides.addClass("hide")
		if (name === "settingspage") {
			this.getCORSList(function () {
				page.displayCORSList()
			})
		}
		if (name === "defaultpage")
			$(".q").val("")
		else if ($(".resultpage .q").val() === "")
			$(".q").val($(".defaultpage .q").val())
	}

	initCORS() {
		this.cmd("corsPermission", ["1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT"], function (res) {
			page.cmd("corsPermission", ["1SiTEs2D3rCBxeMoLHXei2UYqFcxctdwB"], function (res) {
				page.cmd("corsPermission", ["138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP"], function (res) {
					page.cmd("corsPermission", ["1Name2NXVi1RDPDgf5617UoW7xA6YrhM9F"], function (res) {
						page.getZeroNameData_Archived()
						// These sites are basic
						page.initFollowedCORS()
					})
				})
			})
		})
	}

	getZeroNameData() {
		this.cmd("as", ["1Name2NXVi1RDPDgf5617UoW7xA6YrhM9F", "fileGet", "data/names.json"], res => {
			this.zeronames_cors = JSON.parse(res)
		})
	}

	getZeroNameData_Archived() {
		this.cmd("fileGet", ["data/names-2018-9.json"], res => {
			this.zeronames = JSON.parse(res)
		})
	}

	initFollowedCORS() {
		this.getFollowedCors()

		function f(index) {
			if (index >= page.corszitesForQuery.length)
				return
			let item = page.corszitesForQuery[index]
			if (item && item.address)
				page.cmd("corsPermission", [item.address], function (res) {
					f(index + 1)
				})
			else
				f(index + 1)
		}

		f(0)
	}

	generateOrderBys(fields) {
		let arr = []
		for (let f of fields)
			for (let q in this.querySplited)
				arr.push(`(${f} like '%${escapeSql(this.querySplited[q])}%' collate nocase) desc`)
		return arr.join(",")
	}

	genZeroTalkQuery(mode = "and", siteaddr) {
		let wheres = this.generateLikes("topic.title", "topic.body", mode)
		return `SELECT
			        COUNT(comment_id) AS comments_num, MAX(comment.added) AS last_comment, topic.added as last_added, CASE WHEN MAX(comment.added) IS NULL THEN topic.added ELSE MAX(comment.added) END as last_action,
			        topic.*,
			        topic_creator_user.value AS topic_creator_user_name,
			        topic_creator_content.directory AS topic_creator_address,
			        topic.topic_id || '_' || topic_creator_content.directory AS row_topic_uri,
			        NULL AS row_topic_sub_uri, NULL AS row_topic_sub_title,
			        (SELECT COUNT(*) FROM topic_vote WHERE topic_vote.topic_uri = topic.topic_id || '_' || topic_creator_content.directory)+1 AS votes,
			        CASE topic.topic_id || '_' || topic_creator_content.directory WHEN '2_1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj' THEN 1 WHEN '8_1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj' THEN 1 ELSE 0 END AS sticky,
			        "${escapeSql(siteaddr)}" as siteaddr
				FROM topic
					LEFT JOIN json AS topic_creator_json ON (topic_creator_json.json_id = topic.json_id)
					LEFT JOIN json AS topic_creator_content ON (topic_creator_content.directory = topic_creator_json.directory AND topic_creator_content.file_name = 'content.json')
					LEFT JOIN keyvalue AS topic_creator_user ON (topic_creator_user.json_id = topic_creator_content.json_id AND topic_creator_user.key = 'cert_user_id')
					LEFT JOIN comment ON (comment.topic_uri = row_topic_uri AND comment.added < ${(Date.now() / 1000 + 120)})
				WHERE ${wheres}
				GROUP BY topic.topic_id, topic.json_id
				HAVING last_action < ${(Date.now() / 1000 + 120)}
				order by ${this.generateOrderBys(["topic.title", "topic.body"])},votes,comments_num,last_action
				Limit 1000
				`
	}

	genZeroSitesQuery() {
		let wheres_zerosites = this.generateLikes("title", "description")
		let query0s = `SELECT site.*, json.*, COUNT(site_star.site_uri) AS star, site_stat.*
       FROM site
       LEFT JOIN json USING (json_id)
       LEFT JOIN site_star ON (site_star.site_uri = json.directory || "_" || site.site_id)
       LEFT JOIN site_stat ON (site_stat.site_uri = json.directory || "_" || site.site_id)
       WHERE ${wheres_zerosites}
       GROUP BY site.json_id, site_id`
		return query0s
	}

	searchCORS(cb) { // callback,keywords
		let wikiAddr = "138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP"
		let talkAddr = "1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT"
		let sitesAddr = "1SiTEs2D3rCBxeMoLHXei2UYqFcxctdwB"
		this.carditems = []
		page.cmd("as", [wikiAddr, "dbQuery", this.genWikiQuery(wikiAddr)], function (wikires) {
			page.cmd("as", [talkAddr, "dbQuery", page.genZeroTalkQuery("or", talkAddr)], function (talkres) {
				page.cmd("as", [sitesAddr, "dbQuery", page.genZeroSitesQuery(sitesAddr)], function (zerositesres) {
					page.zerositesres = zerositesres
					page.talkres = talkres
					page.wikires = wikires
					console.log(zerositesres)
					console.log(talkres)
					console.log(wikires)
					page.getFollowedCors()
					page.searchFollowedCORS(cb)
				})
			})
		})
	}

	genQuery(type, siteaddr) {
		switch (type) {
			case "ZeroWiki":
				return this.genWikiQuery(siteaddr)
			case "ZeroTalk":
				return this.genZeroTalkQuery("and", siteaddr)
			case "ZeroBlog":
				return this.genZeroBlogQuery("or", siteaddr)
			case "ZeroUp":
				return this.genZeroUpQuery(siteaddr)
			default:
				return null
		}
	}

	insertItems(dbQueryRes) {
		let step = this.searchResult.length / dbQueryRes.length
		if (step < 1) {
			[this.searchResult, dbQueryRes] = [dbQueryRes, this.searchResult]
			step = this.searchResult.length / dbQueryRes.length
		}
		step = Math.ceil(step)

		for (let i = dbQueryRes.length - 1; i > 0; i--)
			this.searchResult.splice(i * step, 0, dbQueryRes[i])
	}

	searchFollowedCORS(cb) { //CORS in settings
		function next(index) {
			if (index >= page.corszitesForQuery.length) {
				cb()
				return
			}
			let item = page.corszitesForQuery[index]
			let query = page.genQuery(item.type, item.address)
			if (query)
				page.cmd("as", [item.address, "dbQuery", query], function (res) {
					if (!(res instanceof Array)) {
						next(index + 1)
					}
					switch (item.type) {
						case "ZeroWiki":
							page.carditems.push(page.processWikiRes(res, item.address))
							break
						case "ZeroBlog":
							page.insertItems(res)
							break
						case "ZeroTalk":
						case "ZeroUp":
							page.insertItems(res)
							break
					}
					next(index + 1)
				})
			else
				next(index + 1)
		}

		next(0)
	}

	genWikiQuery(siteaddr) {
		let conds = []
		for (let x in this.querySplited) {
			if (this.fuzzysearch_wiki) {
				conds.push(`slug like "%${escapeSql(this.querySplited[x])}%" escape "\\" collate nocase`)
				conds.push(`slug like "%${escapeSql(encodeURIComponent(this.querySplited[x]))}%" escape "\\" collate nocase`) // Some Chinese wiki encoded slug
				conds.push(`slug like "%${escapeSql(encodeURIComponent(this.querySplited[x]))}%" escape "\\" collate nocase`)
			} else {
				conds.push(`slug = "${escapeSql(this.querySplited[x])}" collate nocase`)
				conds.push(`slug = "${escapeSql(encodeURIComponent(this.querySplited[x]))}" collate nocase`) // Some Chinese wiki encoded slug
				conds.push(`slug = "${escapeSql(encodeURIComponent(this.querySplited[x]))}" collate nocase`)
			}
		}
		return `select body,date_added,slug,"${escapeSql(siteaddr)}" as siteaddr,"/${escapeSql(siteaddr)}/?Page:" || slug as link from pages where date_added in (select max(date_added) from pages where ${conds.join(" or ")} group by slug limit 2) order by date_added desc limit 2`
	}

	genZeroBlogQuery(mode = "or", siteaddr) {
		return `select *,"${escapeSql(siteaddr)}" as siteaddr from post where ${this.generateLikes("body", "title", mode)} order by ${this.generateOrderBys(["title", "body"])} limit 50`
	}

	genZeroUpQuery(siteaddr) {
		return `select *,"${escapeSql(siteaddr)}" as siteaddr from file left join json using(json_id) where ${this.generateLikes("file.title", "file.file_name", "or")} order by ${this.generateOrderBys(["file.title", "file.file_name"])} Limit 50`
	}

	processWikiBody(body, addr) {
		return body.replace(/\[\[([A-Za-z0-9\-\s]+)\]\]/g, str => ` [${str.slice(2, -2)}](/${addr}/?Page:` + encodeURI(str.slice(2, -2)) + ") ")
	}


	Search(text) {
		let lastnow = Date.now()
		showProgress(10, "Parsing query")
		this.timeDurations = []
		this.searchQuery = text.trim()
		this.mergeItems_addData_done = false
		this.parseQuery()

		function allSearched() {
			showProgress(90, "Rendering")
			page.searchResult_count = page.searchResult.length
			page.processWikiRes(page.wikires, "138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP")
			page.carditems = page.carditems.concat(page.wikires)
			page.displayCards()
			page.displayItems()
			let time = (Date.now() - lastnow) / 1000
			showProgress(100, "Done")
			page.showStat(page.searchResult_count, time)
		}

		showProgress(60, "Querying in main database")

		this.searchMain(() => {
			showProgress(85, "Search CORS")
			this.searchCORS(() => {
				allSearched()
			})
		})
	}

	processWikiRes(res, siteAddr) {
		for (let wi in res) { // only process zerowiki
			res[wi].body = page.processWikiBody(res[wi].body, siteAddr)
			res[wi].datetime = timeagoinstance.format(res[wi].date_added)
			res[wi].title = res[wi].slug
			res[wi].type = "Wiki"
		}
	}

	parseQuery() {
		this.querySplited = this.searchQuery.split(/\s+/g).filter(filterblank)
		let lastEle = this.querySplited[this.querySplited.length - 1]
		let res = /^options?:(.*)$/gi.exec(lastEle)
		this.querySplited.sort((b, a) => a.length - b.length) // from long to short
		if (res) {
			this.options = res[1].split(/,|\s+/g).filter(filterblank)
			this.options.map(o => o.toLowerCase())
			delete this.querySplited[this.querySplited.length - 1]
		}
		this.excludeQueries = []
		for (let x in this.querySplited) {
			let res = /^(\+|-)(.*)$/.exec(this.querySplited[x])
			if (res) {
				this.excludeQueries.push(res[2])
				delete this.querySplited[x]
			}
		}
	}

	generateLikes(onlyExclude) {
		let qs = []
		let mode = "and"
		if (arguments[arguments.length - 1] === "or" || arguments[arguments.length - 1] === "and" || arguments[arguments.length - 1] === "exclude") {
			mode = arguments[arguments.length - 1]
			delete arguments[arguments.length - 1]
		}
		if (mode !== "exclude") {
			for (let f in arguments) { // fields
				for (let q in this.querySplited) {
					qs.push(`${arguments[f]} like "%${escapeSql(this.querySplited[q]).toLowerCase()}%" escape "\\" collate nocase`)
				}
			}
			qs = qs.join(` ${mode} `)
		}
		else
			qs = ""
		let final = qs
		if (this.excludeQueries.length > 0) {
			let eq = []
			for (let f in arguments) {
				for (let q in this.excludeQueries)
					eq.push(`${arguments[f]} not like "%${escapeSql(this.excludeQueries[q]).toLowerCase()}%" escape "\\" collate nocase`)
			}
			if (mode !== "exclude")
				final = `(${final}) and ${eq.join(" and ")}`
			else
				final = eq.join(" and ")
		}
		return final
	}

	caseWhens(fields, phrase = false) {
		let cases = []
		if (phrase)
			for (let f of fields) {
				cases.push(`(case when ${f} like "%${escapeSql(this.searchQuery)}%" then 1 else 0 end)*50`)
				for (let q of this.querySplited) {
					cases.push(`(case when ${f} like "% ${escapeSql(q)} %" then 1 else 0 end)*10`)
					cases.push(`(case when ${f} like "% ${escapeSql(q)} %" then 1 collate nocase else 0 end)*5`)
				}
			}
		else
			for (let f of fields) {
				for (let q of this.querySplited) {
					cases.push(`(case when ${f} like "%${escapeSql(q)}%" then 1 else 0 end)*5`)
					cases.push(`(case when ${f} like "%${escapeSql(q)}%" then 1 collate nocase else 0 end)*2`)
				}
			}
		return cases.join("+")
	}

	searchMain(cb, type = "groupbyzite") {
		let query = ""
		let secondresfilter = this.generateLikes("keyword", "phrase", "url", "title", "exclude")
		let finalfilter = this.generateLikes("description", "exclude")
		let last = Date.now()
		switch (type) {
			case "groupbyzite":
				query = `select sum(rank)                               as rank,
				       group_concat(pageid)                    as pageids,
				       group_concat(keyword)                   as keywords_raw,
				       group_concat(distinct(keyword))         as keywords_distinct,
				       group_concat(phrase, char(10))          as phrases,
				       group_concat(distinct(phrase))          as phrases_distinct,
				       group_concat(url, "|")                  as urls,
				       group_concat(secondres.title,
				                    char(10))                  as titles_raw,
				       group_concat(distinct(secondres.title)) as titles_distinct,
				       group_concat(imgcount)                  as imgcs,
				       max(site_addr) as site_addr,
				       max(site_id) as site_id,
				       zites.*,
				       sum(imgcount)                           as imgcsum
				from (select rank,
				             pageid,
				             keyword,
				             phrase,
				             (case
				                when firstres.url is null then (select url from main where id = pageid)
				                else firstres.url end)   as url,
				             (case
				                when firstres.title is null then (select title from main where id = pageid)
				                else firstres.title end) as title,
				             imgcount,
				             site_id,
				             site_addr
				      from (select pageid,
				                   keyword,
				                   null                                             as phrase,
				                   null                                             as url,
				                   null                                             as title,
				                   (${this.caseWhens(["keyword"])}) as rank
				            from keywords
				            where ${this.generateLikes("keyword")} collate nocase
				            union all
				            select pageid,
				                   null                                                   as keyword,
				                   phrase,
				                   null                                                   as url,
				                   null                                                   as title,
				                   (${this.caseWhens(["phrase"], true)}) as rank
				            from phrases
				            where ${this.generateLikes("phrase")}
				            union all
				            select id                                                                       as pageid,
				                   null                                                                     as keyword,
				                   null                                                                     as phrase,
				                   url,
				                   title,
				                   (${this.caseWhens(["title", "url"], true)}) * 2 as rank
				            from main
				            where ${this.generateLikes("title", "url")}
							union all
				            select null                                                                       as pageid,
				                   null                                                                     as keyword,
				                   description                                                                     as phrase,
				                   null as url,
				                   title,
				                   (${this.caseWhens(["description", "title"], true)}) * 3 as rank
				            from zites
				            where ${this.generateLikes("title", "description")}
				            ) as firstres
				             left join main on pageid = id
				             ${secondresfilter.trim() ? `where ${secondresfilter}` : ""}
				             ) as secondres
				       left join zites on site_id = ziteid
				       	${finalfilter.trim() ? `where ${finalfilter}` : ""}
				group by site_id
				order by rank desc, peers desc`
				break
		}
		console.log(query)
		this.cmd("dbQuery", [query], (res) => {
			this.recordDuration("mainQuery", Date.now() - last)
			this.searchResult = []
			this.maxItemRank = this.searchResult[0] ? this.searchResult[0].rank : 0
			this.searchResult = this.searchResult.concat(res)
			cb()
		})
	}

	showStat(rowc, time) {
		$("div.stat").show()
		$(".rowc").text(rowc)
		$(".sec").text(time)
		this.resetProgress()
	}

	recordDuration(stage, time) { // millisecond
		this.timeDurations.push({stage: stage, time: time})
	}

	resetProgress() {
		progressbox.hide()
		progressbar.hide()
		progressbar.progress("reset")
	}

	ellipsis(text, len) {
		if (typeof text === "undefined")
			return
		return text.length > len ? text.slice(0, len) + "..." : text
	}


	displayCards() {
		this.clearCards()
		if (document.body.clientWidth < 760)
			for (let c of this.carditems)
				this.displayCardsAsItems(c)
		else
			for (let c of this.carditems)
				this.displayCardsNormal(c)
	}

	displayCardsAsItems(item) { //Show cards on mobile
		$(".container-left").append(this.generateCard(item, true))
	}

	displayCardsNormal(item) {
		$(".container-right").append(this.generateCard(item, true))
	}

	clearCards() {
		$(".card:not(.template)").remove()
	}

	generateCard(item, markdown = false) {
		if (typeof item === "undefined")
			return
		if (typeof item.body === "undefined")
			return
		let card = $(".card.template").clone().removeClass("template")
		card.find(".cardtitle").text(item.title).data("href", item.link).attr("href", item.link)
		if (!markdown)
			item.card.find(".cardbody").text(item.body)
		else
			card.find(".cardbody").html(marked(item.body, {
				sanitize: true
			}))
		if (item.datetime)
			card.find(".date_added").text(item.datetime)
		if (item.user)
			card.find(".user").text(item.user)
		if (item.type)
			card.find(".cardtype").text(item.type)
		return card
	}

	generateItem(title, imgc, id, link, description) {
		let ele = $(".item.template").clone()

		let oringinal_link = beatifyUrl(link)
		link = this.processLink(oringinal_link)

		if (!title) title = link
		title = this.processTitle(title)

		title = this.ellipsis(title, 60)

		ele.find("a.ititle").html(this.highlightedText(title)).data("href", link).attr("href", link)

		let type = ele.find(".type")

		if (isSiteRoot(link))
			type.text("SiteRoot").addClass("green")

		if (type.text() === "")
			type.remove()
		link = this.ellipsis(link, 50)
		ele.find(".link").html(this.highlightedText(link))
		ele.data("id", id)

		if (imgc <= 0) {
			ele.find("span.imgc").remove()
			ele.find("span.imgcc").remove()
		} else ele.find("span.imgcc").text(imgc)

		ele.find(".kwsphs").html(this.highlightedText(description))
		ele.removeClass("template")

		return ele
	}

	generateItem_addZerositesData(item, ele) {
		for (let index = 0; index < this.zerositesres.length; index++) {
			const element = this.zerositesres[index]
			if (!element)
				continue
			if (beatifyUrl(element.address) === beatifyUrl(item.url)) {
				ele.find(".zsinfo").addClass("visible")
				ele.find(".zsinfo .zstitle").text(element.title)
				ele.find(".zsinfo .zsdescription").text(element.description)
				ele.find(".zsinfo .zsdateadded").text(timeagoinstance.format(element.date_added * 1000))
				ele.find(".zsinfo .zsstar").text(element.star)
				if (element.peers)
					ele.find(".zsinfo .zspeer").text(element.peers)
			}
		}
	}

	generateItem_addZerotalkData(item, ele) {
		ele.find(".ztinfo").addClass("visible")
		ele.find(".ztvote").text(item.vote)
		ele.find(".ztcommentsnum").text(item.comments_num)
		ele.find(".ztcreator").text(item.topic_creator_user_name)
		ele.find(".ztlastaction").text(timeagoinstance.format(item.last_action * 1000))
	}

	generateItem_addZeroUpData(item, ele) {
		ele.find(".zuinfo").addClass("visible")
		ele.find(".zusize").text(humanFileSize(item.size))
		ele.find(".zudate").text(timeagoinstance.format(item.date_added * 1000))
		ele.find(".zuuser").text(item.cert_user_id)
	}


	generateItem_addZeroBlogData(item, ele) {
		ele.find(".zbinfo").addClass("visible")
		ele.find(".zbbody").text(this.ellipsis(item.body, 140))
		ele.find(".zbdate").text(timeagoinstance.format(item.date_published * 1000))
	}

	getKeywordsPositions(kws, str) {
		let poses = []
		str = str.toLowerCase()

		function getSingleKwPoses(keyw, str, offset = 0) {
			keyw = keyw.toLowerCase()
			let i = str.substr(offset).indexOf(keyw)
			if (i >= 0) {
				poses.push([offset + i, keyw.length])
				getSingleKwPoses(keyw, str, offset + i + keyw.length)
			}
		}

		for (let x in kws)
			getSingleKwPoses(kws[x], str)
		return poses
	}

	highligtRanges(text, arr) {
		arr.sort(function (a, b) {
			return b[0] - a[0]
		})
		let poses = []
		for (let a of arr) {
			poses.push({
				pos: a[0],
				type: "start"
			})
			poses.push({
				pos: a[0] + a[1],
				type: "end"
			})
		}
		poses.sort(function (a, b) {
			return a.pos - b.pos
		})
		let lasttype = "end"
		for (let index = 0; index < poses.length; index++) {
			if (poses[index].type === lasttype) {
				delete poses[index]
				index--
			}
			lasttype = poses[index]
		}
		let lastpos = 0
		let textres = ""
		for (let a of poses) {
			if (a.type === "start") {
				textres += escapeHtml(text.slice(lastpos, a.pos))
			} else {
				textres += `<span class="match">${escapeHtml(text.slice(lastpos, a.pos))}</span>`
			}
			lastpos = a.pos
		}
		textres += text.slice(lastpos)
		return textres === "" ? text : textres
	}


	highlightedText(text) {
		if (typeof text == "undefined" || text === "")
			return ""
		return this.highligtRanges(text, this.getKeywordsPositions(this.querySplited, text))
	}

	emptyItem() {
		$(".container-left>.item:not(.template)").remove()
	}

	processLink(link) {
		return link.replace(/^\/*(.*)/g, "/$1")
	}

	displayItems() {
		this.switchPage()
		this.pagenum = 0
		this.setPager()
		this.showOnePage()
	}

	setSiteRootData(items) {
		for (let i = 0; i < items.length; i++) {
			items[i].siteroot = getSiteRootUrl(items[i].url)
			items[i].siteroot_addr = /^[A-z0-9a-z]+$/.test(items[i].siteroot) ? items[i].siteroot : this.zeronames[items[i].siteroot.toLowerCase()]
		}
	}

	setCatagoryData_siteIdAndData(PropertyNames) {
		let props = PropertyNames ? PropertyNames : Object.getOwnPropertyNames(this.siteIdAndData)
		for (let i = 0; i < props.length; i++) {
			if (!this.siteIdAndData[props[i]] || this.siteIdAndData[props[i]].siteroot)
				continue
			this.siteIdAndData[props[i]].siteroot = isSiteRoot(this.siteIdAndData[props[i]].url)
			this.siteIdAndData[props[i]].realpage = isRealPage(this.siteIdAndData[props[i]].url)
		}
	}

	// Merge items of a same site root.And add the addtional data of sites/real page
	mergeItems_addData(items, firstPage, cb) {
		if (page.mergeItems_addData_done) {
			if (cb)
				cb()
			return
		}
		if (!LoadAllDataOnce) {
			let func = () => {
				for (let i = (!firstPage ? page.lastIndex_mergeItems_addData : 0); i < items.length; i++) {
					if (firstPage)
						if (this.needToQuery_zites.size >= 100) {
							page.lastIndex_mergeItems_addData = i
							for (let j = i; j < items.length; j++) {
								if (page.needToQuery_zites.has(items[i].siteroot_addr)) { // Retain the first one
									items.splice(j, 1)
									j--
								}
							}
							if (cb)
								cb()
							return
						}
					if (!items[i])
						continue
					switch (this.getItemType(items[i])) {
						case "normal":
							let siteroot = items[i].siteroot_addr
							let del = false
							if (!this.needToQuery_zites_obj[siteroot])
								this.needToQuery_zites_obj[siteroot] = []
							if (this.needToQuery_zites.has(siteroot)) // Retain the first one
								del = true
							else {
								this.needToQuery_zites.add(siteroot)
								items[i].ziteObj = this.needToQuery_zites_obj[siteroot]
							}
							this.needToQuery_zites_obj[siteroot].push(items[i])
							if (del) {
								items.splice(i, 1)
								i--
							}
					}
				}
				if (!firstPage) {
					showProgress(100, "Item merged")
				}
				if (cb)
					cb()
			}
			if (!firstPage) {
				page.mergeItems_addData_done = true
				showProgress(60, "Merge items")
				setTimeout(func, 100)
			} else func()
		}
		else {
			page.mergeItems_addData_done = true
			for (let i = 0; i < items.length; i++) {
				if (!items[i])
					continue
				switch (this.getItemType(items[i])) {
					case "normal":
						let siteroot = items[i].siteroot_addr
						let del = false
						if (!this.needToQuery_zites_obj[siteroot])
							this.needToQuery_zites_obj[siteroot] = []
						if (this.needToQuery_zites.has(siteroot)) // Retain the first one
							del = true
						else {
							this.needToQuery_zites.add(siteroot)
							items[i].ziteObj = this.needToQuery_zites_obj[siteroot]
						}
						this.needToQuery_zites_obj[siteroot].push(items[i])
						if (del) {
							items.splice(i, 1)
							i--
						}
				}
			}
			if (cb)
				cb()
		}
	}

	getZiteDataOfItems(cb) {
		let remain = this.needToQuery_zites.size
		if (remain === 0) {
			if (cb)
				cb()
			return
		}
		this.needToQuery_zites.forEach(x => {
			this.cmd("dbQuery", [`select * from zites where address="${x}"`], res => {
				remain--
				this.needToQuery_zites_obj[x].dbres = res[0]
				if (remain === 0)
					if (cb)
						cb()
			})
		})
	}

	getItemType(i) {
		if (typeof i.imgcs !== "undefined")
			return "normal"
		if (i.topic_creator_user_name)
			return "zerotalk"
		if (i.file_name)
			return "zeroup"
		if (i.post_id)
			return "blogpost"
		else
			return "unknown"
	}

	showOnePage() {
		let cot = $(".container-left")
		this.emptyItem()
		scrollTo(0, 0)
		if (this.searchResult.length < 1) {
			cot.append(this.generateItem("Sorry, nothing found", 0, null, "/", "Please type fewer keywords.And use whitespace to separate them"))
		}

		let start = this.pagenum * this.perPageCount
		let items = this.searchResult.slice(start, start + this.perPageCount)
		console.log(items)
		for (let i of items) {
			if (!i)
				continue
			let item = null
			switch (this.getItemType(i)) {
				case "normal":
					item = this.generateItem(i.title, i.imgcsum, i.id, i.site_addr, (i.keywords_distinct ? i.keywords_distinct : "") + (i.phrases_distinct ? i.phrases_distinct : ""))
					item.data("siteaddr", i.site_addr) // real addr
					item.data("obj", i)
					this.generateItem_addZerositesData(i, item)
					break
				case "zerotalk":
					item = this.generateItem(i.title, 0, i.siteaddr + i.topic_id, i.siteaddr + "/?Topic:" + i.row_topic_uri, this.ellipsis(i.body, 150))
					this.generateItem_addZerotalkData(i, item)
					break
				case "zeroup":
					item = this.generateItem(i.title, 0, i.siteaddr + i.date_added + i.json_id + i.size, `${i.siteaddr}/${i.directory}/${i.file_name}`)
					this.generateItem_addZeroUpData(i, item)
					break
				case "blogpost":
					item = this.generateItem(i.title, 0, i.siteaddr + i.post_id, `${i.siteaddr}/?Post:${i.post_id}`)
					this.generateItem_addZeroBlogData(i, item)
					break
				default:
					item = this.generateItem("Unknown", 0, null, "/", "Unknown result item")
			}
			cot.append(item)
		}
		$(".minfo").click(this.showMoreInfo)

	}

	GetPos(obj) {
		var pos = new Object()
		pos.x = obj.offsetLeft
		pos.y = obj.offsetTop
		while (obj = obj.offsetParent) {
			pos.x += obj.offsetLeft
			pos.y += obj.offsetTop
		}
		return pos
	}

	getWordCloudDataZite(zite_id, cb) {
		page.cmd("dbQuery", [`select count(keyword) as times,keyword from keywords where pageid in (select id from main where site_id = ${escapeSql(zite_id)}) group by keyword`], res => {
			let list = []
			let max = 1
			for (let i = 0; i < res.length; i++) {
				max = (res[i].times > max) ? res[i].times : max
				list.push([res[i].keyword, res[i].times])
			}
			cb(list, max)
		})
	}


	showMoreInfo(ev) {
		ev.stopPropagation()
		let parentsitem = $(this).parents(".item")

		$(".minfoitem").remove() // delete all minfoitems
		let mitem = $(".minfobox").clone()
		mitem.removeClass("minfobox hide").addClass("item ui segment minfoitem") // present as an item
		parentsitem.after(mitem)
		scrollTo(0, parentsitem.offset().top - 110)
		$(mitem).click(ev => {
			ev.stopPropagation()
		})
		let notempty = false
		let obj = parentsitem.data("obj")
		if (obj) {
			let mergedPageUrls = obj.urls.split("|")

			mitem.find(".column").show()
			let mergedurls = mitem.find(".mergedurls").empty().show()
			mergedurls.click(ev => {
				if (page.settings.openNewWindow)
					if (ev.target.tagName === "A") {
						let href = $(ev.target).data("href")
						if (href) {
							ev.stopPropagation()
							ev.preventDefault()
							page.cmd("wrapperOpenWindow", href)
						}
					}
			})
			mitem.find(".mergedrowc").text(mergedPageUrls.length)
			for (let i = 0; i < mergedPageUrls.length; i++) {
				let shorted = mergedPageUrls[i].replace(new RegExp(`^${obj.site_addr}`, "g"), "")
				let ele = $(`
						<div class="item">
						    <div class="content">
						      	<h4 class="header"></h4>
						      	<div class="description">
						      		<a class="link"></a>
								</div>
						    </div>
					  	</div>`)
				ele.find(".header").text(shorted)
				let href = page.processLink(beatifyUrl(mergedPageUrls[i]))
				ele.find(".link").text(href).data("href", href).attr("href", href)
				mergedurls.append(ele)
			}
			let zitei = mitem.find(".ziteinfo>tbody")

			zitei.empty()

			function addRow(head, data) {
				let tr = $("<tr></tr>")
				tr.append($("<td></td>").text(head))
				tr.append($("<td></td>").text(data))
				zitei.append(tr)
			}

			addRow("address", obj.site_addr)
			if (obj.clone_from)
				addRow("clone_from", obj.clone_from)
			if (obj.domain)
				addRow("domain", obj.domain)
			if (obj.desciption)
				addRow("desciption", obj.desciption)

			let thmodif = obj.modified * 1000
			if (thmodif > 0)
				mitem.find(".lmodified .detail").text(timeagoinstance.format(thmodif)).attr("title", new Date(thmodif))
			else
				mitem.find(".lmodified").hide()

			let thlaupd = obj.content_updated * 1000
			if (thlaupd > 0)
				mitem.find(".lupdate .detail").text(timeagoinstance.format(thlaupd)).attr("title", new Date(thlaupd))
			else
				mitem.find(".lupdate").hide()

			if (obj.peers > 0)
				$(".peernum").progress({
					value: obj.peers,
					total: maxPeers,
					showActivity: false,
					label: "ratio",
					text: {ratio: "{value}", active: "Peers"}
				})
			else
				$(".peernum").remove()

			if (obj.zn_version)
				$(".znversion").progress({
					value: zn_version_to_deci(obj.zn_version),
					total: max_zn_ver,
					showActivity: false,
					label: "ratio",
					text: {ratio: "{value}", active: "Zeronet Version"}
				})
			else
				$(".znversion").remove()


			let wordc = mitem.find(".wordcloud")
			wordc.show()
			wordc.empty().append("<canvas></canvas>")
			let can = wordc.find("canvas")[0]
			let canec = echarts.init(can)

			canec.showLoading("default", {
				text: "WordCloud",
				color: "#c23531",
				textColor: "#000",
				maskColor: "rgba(255, 255, 255, 0.8)",
				zlevel: 0
			})

			page.getWordCloudDataZite(obj.site_id, (wordlist, max) => {
				canec.hideLoading()
				canec.dispose()
				let ave = Math.floor(max / 2)
				if (wordlist.length > 0) {
					notempty = true
					WordCloud(can, {
						list: wordlist,
						weightFactor: pt => (pt >= ave) ? (pt / max * 20) : (pt / max * 5)
					})
				}
				else
					wordc.hide()
				if (mergedurls.children().length > 0)
					notempty = true
			})

			mitem.find(".column").show()
		}
		else {
			mitem.find(".nomoredata").show()
		}
	}

	hideMoreInfo() {
		$(".minfobox").addClass("hide")
		$(".minfobox>*").hide()
		$(".phs").empty()
		$(".kws").empty()
		$(".minfoitem").remove()
		$(".minfobox .nomoredata").hide()
	}

	getZiteInfo(site_addr, cb_succ, cb_fail) {
		this.cmd("dbQuery", [`select * from zites where address="${site_addr}"`], res => {
			if (!res instanceof Array || res.length < 1) {
				console.log(res)
				if (cb_fail)
					cb_fail(res)
				return
			}
			if (cb_succ)
				cb_succ(res[0])
		})
	}

	setPager() {
		let pagescount = Math.ceil(this.searchResult.length / this.perPageCount)
		let pagerscount = pagescount > this.maxPagerBtnCount ? this.maxPagerBtnCount : pagescount
		let startnum = this.pagenum - parseInt(this.maxPagerBtnCount / 2)
		if (startnum - 1 < 1)
			startnum = 1
		let ps = $(".pagersub")
		ps.empty()
		if (this.pagenum > 0)
			ps.append(`<div class="prev">&lt</div>`)
		for (let index = startnum; index <= startnum + pagerscount - 1 && index <= pagescount; index++) {
			ps.append(`<div${index - 1 == this.pagenum ? " class=\"sel\"" : ""}>${index}</div>`)
		}
		if (this.pagenum < pagescount - 1)
			ps.append(`<div class="next">&gt</div>`)

		$(".prev").click(function () {
			page.pagenum--
			page.showOnePage()
			page.setPager()
		})

		$(".next").click(function () {
			page.pagenum++
			page.showOnePage()
			page.setPager()
		})

		$(".pagersub>div:not(.prev):not(.next)").click(function () {
			page.pagenum = this.innerText - 1
			page.showOnePage()
			page.setPager()
		})
	}

	processTitle(title) {
		if (typeof title === "undefined")
			return
		return title.replace(/\s-\sZeroNet$/g, "")
	}

	getCORSList(cb) {
		this.cmd("dbQuery", [`select distinct site_address,site_type,replace(directory,'users/','') as directory,date_added,substr(header,0,40) as header from search_zite left join json using(json_id) where date_added < ${Date.now()} order by date_added desc`], function (res) {
			if (!(res instanceof Array)) {
				showError("There is an error in sql query : " + JSON.stringify(res))
				page.corszites_list = []
				return
			}
			page.corszites_list = res
			for (let i = 0; i < page.corszites_list.length; i++) {
				if (!/^1[A-Z0-9a-z]{30,40}$/.test(page.corszites_list[i].site_address)) {
					page.corszites_list.splice(i, 1)
					i--
				}
			}
			if (cb)
				cb()
		})
	}

	displayCORSList() {
		let listele = $(".list.cors")
		listele.empty()
		if (this.corszites_list)
			for (let index = 0; index < this.corszites_list.length; index++) {
				const element = this.corszites_list[index]
				if (!(element.header && element.site_address && element.date_added && element.site_type))
					continue
				let ele = $(`<div class="item">
                            <div class="content">
                                <a class="header">Untitled</a>
                                <div class="description"></div>
                            </div>
                        </div>`)

				ele.find(".header").text(element.header).click(function (e) {
					page.EnableOrDisableCORSZite($(this).data("site_address"))
					return false
				}).data("site_address", element.site_address)

				let site_type_label = $(`<span class="ui small label teal">
                                        <i class="tag icon"></i>
                                        <span class="typename ui small label olive"></span>
                                    </span>`)
				let desc = ele.find(".description")
				desc.append(site_type_label.find(".typename").text(element.site_type))

				desc.append($(`<span class="date"></span>`).text(timeagoinstance.format(element.date_added, "en_US")))
				desc.append($(`<span class="user"></span>`).text(element.directory))
				listele.append(ele)
			}
		this.displaySettingsCORSItem()
	}

	submitCORSZite() {
		let item = {}
		item.site_address = $(".siteaddr").val()
		item.date_added = Date.now()
		item.header = $(".szsheader").val()
		item.site_type = $(".dropdown.site_type").dropdown("get value")
		for (let x in item)
			if (item.hasOwnProperty(x) && !item[x]) {
				page.cmd("wrapperNotification", ["info", "Field should not be empty", 3000])
				return
			}
		this.editUserContent(function (json) {
			if (!json.search_zite)
				json.search_zite = []
			json.search_zite.push(item)
		})
	}

	displaySettingsCORSItem() {
		if (!page.settings || !page.settings.corszites)
			return
		$(".list.cors>.item").each(function () {
			if (page.settings.corszites.indexOf($(this).find(".header").data("site_address")) > -1)
				$(this).addClass("corsinsettings")
			else
				$(this).removeClass("corsinsettings")
		})
	}

	getsettings(cb) {
		page.cmd("userGetSettings", [], function (res) {
			if (!res) {
				res = {
					openNewWindow: true,
					corszites: []
				}
				page.cmd("wrapperNotification", ["info", "If Horzion does not work, please report it on github at https://github.com/blurHY/Horizon/", 10000])
			}
			if (!res.corszites)
				res.corszites = []
			page.settings = res
			page.setSettings()
			if (cb)
				cb()
		})
	}

	setSettings(cb = null) {
		if (typeof this.settings !== "object")
			this.settings = {}
		page.cmd("userSetSettings", [this.settings], function () {
			if (cb)
				cb()
		})
	}

	getFollowedCors() {
		if (!page.corszitesForQuery)
			page.corszitesForQuery = []
		if (!page.corszites_list)
			return

		a:for (let c of page.corszites_list) {
			if (!/^1[A-Z0-9a-z]{30,40}$/.test(c.site_address))
				continue
			if (page.settings.corszites.indexOf(c.site_address) > -1) { // Followed site
				for (let obj of page.corszitesForQuery)
					if (obj.address === c.site_address)
						continue a
				if (c.site_address && c.date_added && c.site_type && c.header)
					page.corszitesForQuery.push({
						address: c.site_address,
						type: c.site_type
					})
			}
		}
	}

	EnableOrDisableCORSZite(siteAddr) {
		if (!siteAddr)
			return
		if (typeof this.settings !== "object")
			this.settings = {}
		if (!this.settings.corszites)
			this.settings.corszites = []
		if (this.settings.corszites.indexOf(siteAddr) < 0)
			this.settings.corszites.push(siteAddr)
		else
			delete this.settings.corszites[this.settings.corszites.indexOf(siteAddr)]
		this.setSettings(function () {
			page.getsettings(function () {
				page.displaySettingsCORSItem()
				page.initCORS()
			})
		})
	}

	editUserContent(callback, times = 0) {
		if (times > 1)
			return
		if (!this.site_info.cert_user_id) {
			this.cmd("certSelect", {
				"accepted_domains": ["zeroid.bit"]
			}, function (res) {
				page.editUserContent(callback, times + 1)
			})
			return
		}
		let inner_path = "data/users/" + this.site_info.auth_address + "/data.json"
		page.cmd("fileGet", [inner_path, false], function (res) {
			if (res) {
				try {
					res = JSON.parse(res)
				} catch {
					return
				}
			}
			if (res == null)
				res = {}
			callback(res)
			page.cmd("fileWrite", [inner_path, Text.fileEncode(res)], function (res) {
				if (res === "ok") {
					page.cmd("sitePublish", {
						"inner_path": "data/users/" + page.site_info.auth_address + "/content.json"
					}, function (res) {
						console.log(res)
					})
				} else {
					page.cmd("wrapperNotification", ["error", "File write error: #{res}"])
				}
			})
		})
	}

	getAllDomains(site_addr) {
		let names = Object.getOwnPropertyNames(this.zeronames)
		let domains = []
		for (let i = 0; i < names.length; i++)
			if (site_addr.indexOf(this.zeronames[names[i].toLowerCase()]) >= 0)
				domains.push(names[i])
		return domains
	}

	showRelationShipGraph(chart, links, ids) {
		let catagories = [
			{name: "Page"},
			{name: "RealPage"},
			{name: "SiteRoot"}
		]
		let nodes = []
		let props = [...ids]
		let map = {}
		this.setCatagoryData_siteIdAndData(props)
		for (let i = 0; i < props.length; i++) {
			if (!this.siteIdAndData[props[i]])
				continue
			let newnode = {}
			map[this.siteIdAndData[props[i]].id] = i
			newnode.id = i
			newnode.name = this.siteIdAndData[props[i]].title
			newnode.itemStyle = null
			newnode.symbolSize = 10
			newnode.value = 10
			newnode.catagory = this.siteIdAndData[props[i]].siteroot ? 2 : (this.siteIdAndData[props[i]].realpage ? 1 : 0)
			newnode.x = newnode.y = null
			newnode.draggable = true
			nodes.push(newnode)
		}
		for (let i = 0; i < links.length; i++) {
			links[i].target = map[links[i].sub]
			links[i].source = map[links[i].parent]
		}
		chart.hideLoading()
		let option = {
			tooltip: {
				formatter: function (params) {
					if (params.dataType === "node")
						console.log(params)
				},
				position: {
					right: 10,
					bottom: 10
				}
			},
			legend: [{
				data: catagories.map(function (a) {
					return a.name
				})
			}],
			series: [
				{
					name: "Relationship",
					type: "graph",
					layout: "force",
					data: nodes,
					links: links,
					catagories: catagories,
					roam: true,
					force: {
						repulsion: 100,
						layoutAnimation: false
					},
					label: {
						normal: {
							position: "right"
						}
					}
				}
			],
			grid: {
				left: 0,
				top: 0,
				right: 0,
				bottom: 0
			},
			animation: true
		}
		chart.setOption(option)
	}

	getRelationshipForZite(domainsAndAddrs, cb, maxDepthLevel = 1) { // Recursively,level start from 1
		let relationships = []
		let level = 0
		let allIds = new Set()

		function get(urlsOrId) {
			page.getSubAndParentPages(urlsOrId, res => {
				relationships = relationships.concat(res)
				let ids = new Set()
				for (let i = 0; i < res.length; i++) {
					ids.add(res[i].sub)
					ids.add(res[i].parent)
					allIds.add(res[i].sub)
					allIds.add(res[i].parent)
				}
				ids = Array.from(ids)
				page.getDataWithSiteIds(ids, () => {
					level++
					if (level >= maxDepthLevel) {
						cb(relationships, allIds)
						return
					}
					for (let id of ids)
						get(id)
				})
			})
		}

		get(domainsAndAddrs)
	}

	getDataWithSiteIds(ids, cb) {
		let remain = ids.length
		for (let i = 0; i < ids.length; i++) {
			if (this.siteIdAndData[ids[i]]) {
				remain--
				continue
			}
			this.cmd("dbQuery", ["select * from main where id=" + ids[i]], res => {
				remain--
				if ((res instanceof Array) && res.length > 0)
					this.siteIdAndData[ids[i]] = res[0]
				if (remain === 0) {
					if (cb) cb()
				}
			})
		}
	}

	getSubAndParentPages(pageurlsOrID, cb) {
		let str = `id=${pageurlsOrID}`
		if (pageurlsOrID instanceof Array) {
			let arr = []
			for (let x of pageurlsOrID)
				arr.push(`url="${escapeSql(x)}"`)
			str = arr.join(" or ")
		}
		this.cmd("dbQuery", [` select relationship.sub,relationship.parent from relationship where sub in (select id from main where ${str})
								union all
								select relationship.sub,relationship.parent from relationship where parent in (select id from main where ${str})`], cb)
	}
}

const arrayAverage = arr => arr.reduce((acc, val) => acc + val, 0) / arr.length

page = new Page()


function options() {
	showModalBox("options")
	return false
}

function help() {
	showModalBox("help")
	return false
}

function showModalBox(divclass) {
	$(`.${divclass}`).show()
	$(`.modalbox>div:not(.${divclass})`).hide()
	$(".modal").show()
	$(".modalbox").show()
}

function hideModalBox() {
	$(".modal").hide()
	$(".modalbox").hide()
}


var entityMap = {
	"&": "&amp;",
	"<": "&lt;",
	">": "&gt;",
	"\"": "&quot;",
	"'": "&#39;",
	"/": "&#x2F;",
	"`": "&#x60;",
	"=": "&#x3D;"
}

function escapeHtml(string) {
	return String(string).replace(/[&<>"'`=\/]/g, s => entityMap[s])
}


function escapeSql(string) {
	return String(string).replace(/[%\\"'_]/g, function (char) {
		switch (char) {
			case "'":
				return "''"
			case "\"":
				return "\"\""
			default:
				return "\\" + char
		}
	})
}

function getSiteRootUrl(url) {
	try {
		return /(http:\/\/127\.0\.0\.1:4311.\/)?([A-Za-z0-9\.]+)/g.exec(url)[2]
	} catch {
	}
}

function isSiteRoot(url) {
	return /^\s*[0-9A-Za-z\.]+\/?\s*$/g.test(url)
}

function isRealPage(url) {
	return /^[^?]$/g.test(url)
}

class Text {
	static fileEncode(obj) {
		if (typeof obj === "string") {
			return btoa(unescape(encodeURIComponent(obj)))
		} else {
			return btoa(unescape(encodeURIComponent(JSON.stringify(obj, void 0, "\t"))))
		}
	}
}

function humanFileSize(bytes, si) {
	var thresh = si ? 1000 : 1024
	if (Math.abs(bytes) < thresh) {
		return bytes + " B"
	}
	var units = si ? ["kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"] : ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
	var u = -1
	do {
		bytes /= thresh
		++u
	} while (Math.abs(bytes) >= thresh && u < units.length - 1)
	return bytes.toFixed(1) + " " + units[u]
}

function showProgress(percent, label) {
	progressbox.show()
	progressbar.show()
	scrollTo(0, 0)
	if ($(".defaultpage").hasClass("hide"))
		progressbox.addClass("resultstate")
	else
		progressbox.removeClass("resultstate")
	progressbar.progress({
		percent
	})
	progressbar.progress("set label", label)
}

function showError(msg) {
	page.cmd("wrapperNotification", ["error", msg])
}
